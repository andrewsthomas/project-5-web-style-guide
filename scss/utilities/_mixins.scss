// ==========================================================================
// Mixins
// ==========================================================================

// BEM selectors

@mixin e($element) {
  &__#{$element} {
    @content;
  }
}

@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}

// Media queries

@mixin mq($break) {
  @if $break == "small" {
    @media (min-width: $brkpoint--sm) and (max-width: $brkpoint--md) {
      @content;
    }
  }
  @else if $break == "medium" {
    @media (min-width: $brkpoint--md + 1) {
      @content;
    }
  }
  @else {
    @error "Sorry, no value could be retrieved for '#{$break}'.";
  }
}

// Generate modifier color classes

@mixin bg-colors($map) {
  @each $theme, $color in $map {
    &--#{$theme} {
      background-color: $color;
    }
  }
}

// Flexbox layout

@mixin flexed($dis: null, $flow: null, $just: null, $flex: null) {
    display: $dis;
    flex-flow: $flow;
    justify-content: $just;
    flex: $flex;
}

@mixin centered() { // used to center flexbox items
  margin: auto;
}

// Grid columns

@mixin g-columns {
  @for $i from 1 through $g-col-count {
    $context: g-context($g-col-width, $g-col-count ,$g-gutter-width) !global;
    $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));

    // Generate column modifier classes
    &--#{$i} {
      width: percentage($target / $context);
    }
  }
}

// Grid Row Theme Colors Bottom Margin

@mixin grid-margin {
  margin-bottom: em(35px);
}
